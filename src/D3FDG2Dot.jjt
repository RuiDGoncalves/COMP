/**
 * JJTree template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */
options
{
  static = true;
  LOOKAHEAD = 1;
}

PARSER_BEGIN(D3FDG2Dot)
import java.io.File;
import java.io.InputStream;
import java.net.URL;
import java.util.Scanner;
import java.util.ArrayList;

public class D3FDG2Dot
{
  		
	public static void main(String args [])
	{
	    String filename = "";
		boolean exists = false;
		D3FDG2Dot parseJson = null;
				
		System.out.println("Enter the name of file which you want to back up:");
		Scanner input = new Scanner(System.in);
		filename = input.nextLine();

		try{
			InputStream in = D3FDG2Dot.class.getClassLoader()
                              .getResourceAsStream(filename);
			parseJson = new D3FDG2Dot(in);  //filename tem de estar na pasta src
        	exists=true;
		} catch(NullPointerException e){
			System.out.println("Invalid file.");
			System.exit(0);
		}
	
        SimpleNode root = null;
		try {
			root = parseJson.Start();
		} catch (ParseException e) {
			e.printStackTrace();
		}

        root.dump(""); // imprime no ecrã a árvore

		//verificar regras
		System.out.println("\nStarting semantic analisys...\n");
	 	boolean noerror = root.semanticDump();
		System.out.println("\nEnd of semantic analisys.\n");

		if(noerror == false) return;

		ArrayList<Nodes > nodes = root.getNodesArray();
		ArrayList<Links > links = root.getLinksArray();

		Graph grafo = new Graph();
		
		for(Nodes node : nodes) {
                	grafo.addNode(node);
                }

                for(Links li : links) {
                	grafo.addLink(li);
                }
		 Printer writer = new Printer(grafo, links, nodes);
                writer.createFile();
}
PARSER_END(D3FDG2Dot)

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
}

TOKEN:
{
 	< #CHARACTER:  ["a"-"z","A"-"Z","0"-"9","/","'","`","(",")","*","-","|","&","\\",".","$","!","@","#","%","^","_","+","?","<",">","~"] >
|   <  INTEGER : ["0"-"9"] (["0"-"9"])* >
}

TOKEN : /* Open, close and dots */
{
/* Open and Close File Chars */
  	<  OPEN_CURLY_BRACKETS : "{" >
| 	<  CLOSE_CURLY_BRACKETS : "}" >
	/* Open and Close List Chars */
| 	<  OPEN_LIST  : "[" >
| 	<  CLOSE_LIST  : "]" >
	/* Syntax Pontuation */
| 	<  COMMA : "," >
| 	<  DOUBLE_DOT  : ":" >
| 	<  INVERTED_COMMAS  : "\"" >
}

TOKEN: /* Structure */
{	
 	<  NODES_TOKEN  : "nodes" > 
|	<  NAME_TOKEN  : "name" >
| 	<  GROUP_TOKEN  : "group" >
| 	<  LINKS_TOKEN  : "links" >
| 	<  SOURCE_TOKEN  : "source" >
| 	<  TARGET_TOKEN  : "target" >
| 	<  VALUE_TOKEN  : "value" >
|   <  NAME : (<CHARACTER> (<CHARACTER>)* ) > 
}

public SimpleNode Start() :{}
{
	BeginParser()
	{
	  return jjtThis;
	}
}

void BeginParser()  :{} //{"nodes":[....], "links":[....]}  
{
  	try  	{    	TermOpenCurlyBrackets() NodesList() TermComma() LinksList() TermCloseCurlyBrackets()
	} catch (ParseException excep)
	{
		 System.out.println(excep.toString() + "\n Fatal Error. Please verify your file content.");
	}
}

//NODES
void NodesList()  :{} //"nodes":[....]
{
	 NodesToken() TermDoubleDot() TermOpenList() ArrayNodes() TermCloseList()
}

void NodesToken() : {} //"nodes"
{
  	TermInvertedCommas() TermNodesToken() TermInvertedCommas()
}

void ArrayNodes() : {}// Recursividade para completar lista de nós. no + virgula lista de nos OU no
{    try
  	{
    	Node() (TermComma() Node())*
	}
	catch (ParseException excep)
	{
		error_skipto(CLOSE_CURLY_BRACKETS, excep);
		TermComma();
		ArrayNodes();
	}
}

void Node()  :{} //{"name":"Myriel","group":1}
{
	TermOpenCurlyBrackets() NodeContent() TermCloseCurlyBrackets()
}

void NodeContent()  :{} //"name":"Myriel","group":1
{
	NameContent() TermComma() GroupContent()
}

void NameContent()  :{} //"name":"Myriel"
{
 	TermInvertedCommas() TermNameToken() TermInvertedCommas() TermDoubleDot() TermInvertedCommas() TermName() TermInvertedCommas()
}

void GroupContent()  :{} //"group":1
{
	TermInvertedCommas() TermGroupToken() TermInvertedCommas() TermDoubleDot() TermIntegerGroup()
}

//LINKS
void LinksList()  :{} //"links":[....]
{
	TermInvertedCommas() TermLinksToken() TermInvertedCommas() TermDoubleDot() TermOpenList() ArrayLinks() TermCloseList()
}

void ArrayLinks()  :{} // Recursividade para completar lista de arestas. aresta + virgula lista de arestas OU aresta
{
  	try  	{    	Link() (TermComma() Link())*
	}
	catch (ParseException excep)
	{
		error_skipto(CLOSE_CURLY_BRACKETS, excep);
		TermComma();
		ArrayLinks();
	}
}

void Link()  :{} //{"source":1,"target":0,"value":1}
{
	TermOpenCurlyBrackets() LinkContent() TermCloseCurlyBrackets()
}

void LinkContent()  :{} //"source":1,"target":0,"value":1
{
  	SourceContent() TermComma() TargetContent() TermComma() ValueContent()
}

void SourceContent()  :{} //"source":1
{
	TermInvertedCommas() TermSourceToken() TermInvertedCommas() TermDoubleDot() TermIntegerSource()
}

void TargetContent()  :{} //"target":0
{
	TermInvertedCommas() TermTargetToken() TermInvertedCommas() TermDoubleDot() TermIntegerTarget()
}

void ValueContent()  :{} //"value":1
{	TermInvertedCommas() TermValueToken() TermInvertedCommas() TermDoubleDot() TermIntegerValue()
}

JAVACODE
void error_skipto(int kind, ParseException excep) {
  System.out.println(excep.toString());  // print the error message
  Token t;
  do {
    t = getNextToken();
  } while (t.kind != kind);
}


//termination symbols
void TermInvertedCommas() : {}
{	<INVERTED_COMMAS>
	{jjtThis.val = "\"";}
}

void TermNodesToken() : {} //"nodes"
{
	<NODES_TOKEN>
  	{jjtThis.val = "nodes";}
}

void TermLinksToken() : {} //"links"
{
	<LINKS_TOKEN>
  	{jjtThis.val = "links";}
}

void TermNameToken() : {} //"name"
{
	<NAME_TOKEN>
  	{jjtThis.val = "name";}
}

void TermGroupToken() : {} //"group"
{
	<GROUP_TOKEN>
  	{jjtThis.val = "group";}
}

void TermSourceToken() : {} //"source"
{
	<SOURCE_TOKEN>
  	{jjtThis.val = "source";}
}

void TermTargetToken() : {} //"target"
{
	<TARGET_TOKEN>
  	{jjtThis.val = "target";}
}

void TermValueToken() : {} //"value"
{
	<VALUE_TOKEN>
	{jjtThis.val = "value";}
}

void TermDoubleDot() : {}
{	<DOUBLE_DOT> 
	{jjtThis.val = ":";} 
}

void TermIntegerGroup() : {Token t;}
{
	t = <INTEGER>
  	{jjtThis.val = t.image;
  	jjtThis.line = t.beginLine;}
}

void TermIntegerSource() : {Token t;}
{
	t = <INTEGER>
  	{jjtThis.val = t.image;
  	jjtThis.line = t.beginLine;}
}

void TermIntegerTarget() : {Token t;}
{
	t = <INTEGER>
  	{jjtThis.val = t.image;
  	jjtThis.line = t.beginLine;}
}

void TermIntegerValue() : {Token t;}
{
	t = <INTEGER>
  	{jjtThis.val = t.image;
  	jjtThis.line = t.beginLine;}
}

void TermName() : {Token t;}
{
	t = <NAME>
	{jjtThis.val = t.image;
  	jjtThis.line = t.beginLine;}
}

void TermComma() : {}
{
	<COMMA> 
	{jjtThis.val = ",";} 
}

void TermOpenCurlyBrackets() : {} //#open
{
	<OPEN_CURLY_BRACKETS> 
	{jjtThis.val = "{";} 
}

void TermCloseCurlyBrackets() : {} //#close
{
	<CLOSE_CURLY_BRACKETS> 
	{jjtThis.val = "}";} 
}

void TermOpenList() : {} //#openlist closelist
{
	<OPEN_LIST> 
	{jjtThis.val = "[";} 
}

void TermCloseList() : {}
{
	<CLOSE_LIST> 
	{jjtThis.val = "]";} 
}
